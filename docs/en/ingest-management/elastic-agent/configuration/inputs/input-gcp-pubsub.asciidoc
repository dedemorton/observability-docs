:input-type: gcp-pubsub

[[gcp-pubsub-input]]
= GCP Pub/Sub input

++++
<titleabbrev>GCP Pub/Sub</titleabbrev>
++++

Use the `gcp-pubsub` input to read messages from a Google Cloud Pub/Sub topic
subscription.

This input can, for example, be used to receive Stackdriver logs that have been
exported to a Google Cloud Pub/Sub topic.

//QUESTION: How would users configure this with the agent?
//Multiple Filebeat instances can be configured to read from the same
//subscription to achieve high-availability or increased throughput.

Example configuration:

[source,yaml]
----
inputs:
  - type: gcp-pubsub
    project_id: my-gcp-project-id
    topic: vpc-firewall-logs-topic
    subscription.name: elastic-agent-vpc-firewall-logs-sub
    credentials_file: ${path.config}/my-pubsub-subscriber-credentials.json
----

[[input-gcp-pubsub-configuration-settings]]
== Configuration settings

The `gcp-pubsub` input supports the following settings. Many of these settings
have sensible defaults that allow you to run {agent} with minimal configuration.

{also-see-common-input-settings}

[id="input-gcp-pubsub-credentials_file-setting"]
`credentials_file`::
(string) The path to a JSON file containing the credentials and key used to
subscribe. As an alternative you can use the `credentials_json` config option or
rely on https://cloud.google.com/docs/authentication/production[Google
Application Default Credentials] (ADC).

[id="input-gcp-pubsub-credentials_json-setting"]
`credentials_json`::
(string) A JSON blob containing the credentials and key used to subscribe.
This can be as an alternative to `credentials_file` if you want to embed the
credential data within your config file or put the information into a keystore.
You may also use https://cloud.google.com/docs/authentication/production[Google
Application Default Credentials] (ADC).

[id="input-gcp-pubsub-project_id-setting"]
`project_id` (required)::
(string) Google Cloud project ID.


[id="input-gcp-pubsub-subscription.create-setting"]
`subscription.create`::
(boolean) Configures the input to create the subscription if it does not
exist.
+
Default: `true`

[id="input-gcp-pubsub-subscription.max_outstanding_messages-setting"]
`subscription.max_outstanding_messages`::
(int) The maximum number of unprocessed messages (unacknowledged but not yet
expired). If the value is negative, there is no limit on the number of
unprocessed messages.
+
Default: `1000`

[id="input-gcp-pubsub-subscription.name-setting"]
`subscription.name` (required)::
(string) Name of the subscription to read from.

[id="input-gcp-pubsub-subscription.num_goroutines-setting"]
`subscription.num_goroutines`::
(int) The number of goroutines to create to read from the subscription. This
does not limit the number of messages that can be processed concurrently or the
maximum number of goroutines the input will create. Even with one goroutine,
many messages might be processed at once, because that goroutine may continually
receive messages. To limit the number of messages being processed concurrently,
set `subscription.max_outstanding_messages`.
+
Default: `1`

[id="input-gcp-pubsub-NAME-setting"]
`topic` (required)::
(string) Google Cloud Pub/Sub topic name.
